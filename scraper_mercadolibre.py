# URL Base: https://listado.mercadolibre.com.ar/
# Producto sugerido: Notebooks, smartphones, o electrodom√©sticos
# Desaf√≠os t√©cnicos:
# o Detecci√≥n b√°sica de bots
# o Paginaci√≥n con JavaScript
# o M√∫ltiples layouts de productos
# o Rate limiting moderado



import time
from config import getDriver, fecha_extraccion
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException, WebDriverException



import time

def scroll_hasta_el_final(driver):
    """
    Realiza scroll hacia abajo hasta el final de la p√°gina web para
    cargar contenido din√°mico (ejemplo: productos que se cargan al hacer scroll).

    Par√°metros:
        driver: instancia de Selenium WebDriver.

    Comportamiento:
        Hace scroll hasta que la altura de la p√°gina no cambie despu√©s de
        un intento (o se llegue al m√°ximo de intentos permitidos).
    """

    SCROLL_PAUSE_TIME = 1.5  # Tiempo en segundos para esperar tras cada scroll
    MAX_SCROLL_INTENTOS = 20  # M√°ximo n√∫mero de scrolls para evitar loops infinitos

    try:
        # Obtener altura inicial del documento
        ultimo_alto = driver.execute_script("return document.body.scrollHeight")
        intentos = 0

        while intentos < MAX_SCROLL_INTENTOS:
            # Hacer scroll hasta el final de la p√°gina
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            # Esperar un tiempo para que la p√°gina cargue contenido nuevo
            time.sleep(SCROLL_PAUSE_TIME)

            # Obtener la nueva altura despu√©s del scroll
            nuevo_alto = driver.execute_script("return document.body.scrollHeight")

            # Si la altura no cambi√≥, significa que no hay m√°s contenido para cargar
            if nuevo_alto == ultimo_alto:
                break

            # Actualizar la altura para el siguiente ciclo
            ultimo_alto = nuevo_alto
            intentos += 1

    except Exception as e:
        print(f"‚ö†Ô∏è Error durante el scroll: {e}")










def extraer_datos_productos(url, busqueda, fecha_extraccion, driver):
    """
    Extrae datos de productos desde una p√°gina de listado de MercadoLibre.
    Retorna una lista de diccionarios con la informaci√≥n obtenida.
    
    Maneja errores comunes: timeout, captcha, cambios de estructura, etc.
    """

    productos = []
    urlCompleta = url + busqueda

    try:
        driver.get(urlCompleta)

        # Posible detecci√≥n de captcha o bloqueo
        if "Verificaci√≥n" in driver.title or "reCAPTCHA" in driver.page_source.lower():
            print("‚ö†Ô∏è Captcha detectado o bloqueo temporal.")
            return []

        # Espera hasta que los productos sean visibles (m√°x. 10s)
        WebDriverWait(driver, 10).until(
            EC.visibility_of_all_elements_located((By.CSS_SELECTOR, ".ui-search-result__wrapper"))
        )

        # Hacer scroll hasta el final de la p√°gina para cargar todos los productos
        scroll_hasta_el_final(driver)

        todosElementosProductos = driver.find_elements(By.CSS_SELECTOR, ".ui-search-result__wrapper")

        for i, elemento in enumerate(todosElementosProductos):
            try:
                producto = elemento.find_element(By.CLASS_NAME, "poly-component__title-wrapper").text
            except NoSuchElementException:
                producto = None

            try:
                precio = int(elemento.find_element(By.CSS_SELECTOR, ".andes-money-amount__fraction").text.replace('.', ''))
            except NoSuchElementException:
                precio = None

            try:
                vendedor = elemento.find_element(By.CSS_SELECTOR, ".poly-component__seller").text
            except NoSuchElementException:
                vendedor = None

            try:
                ubicacion = elemento.find_element(By.CSS_SELECTOR, ".ui-search-item__location").text
            except NoSuchElementException:
                ubicacion = None

            try:
                reputacion_vendedor = elemento.find_element(By.CSS_SELECTOR, ".poly-reviews__rating").text
            except NoSuchElementException:
                reputacion_vendedor = None

            try:
                url_producto = elemento.find_element(By.CSS_SELECTOR, ".poly-component__title-wrapper a").get_attribute("href")
            except NoSuchElementException:
                url_producto = None

            try:
                envio_texto = elemento.find_element(By.CSS_SELECTOR, ".poly-component__shipping").text.strip().lower()
                envio_gratis = envio_texto == 'env√≠o gratis' or envio_texto.startswith('llega gratis')
            except NoSuchElementException:
                envio_gratis = None

            productoInfo = {
                "id": i,
                "producto": producto,
                "precio": precio,
                "ubicacion": ubicacion,
                "vendedor": vendedor,
                "reputacion_vendedor": reputacion_vendedor,
                "fecha_extraccion": fecha_extraccion,
                "url_producto": url_producto,
                "envio_gratis": envio_gratis,
                "categoria": busqueda
            }

            productos.append(productoInfo)

    except TimeoutException:
        print("‚è∞ Timeout: No se cargaron los productos a tiempo.")
    except WebDriverException as e:
        print(f"üåê Error de conectividad o carga de la p√°gina: {str(e)}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error inesperado: {str(e)}")

    return productos
     










url = 'https://listado.mercadolibre.com.ar/'

driver = getDriver()

productosABuscar = ["notebooks", "smartphones", "electrodomesticos"]



producto = extraer_datos_productos(url,'notebooks', fecha_extraccion, driver)
for p in producto:
    print(p)
